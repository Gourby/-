from __future__ import print_function

#import scipy.io as sio
import h5py
import keras
import numpy as np
import random
from keras.layers import Dense,GlobalAveragePooling1D,LeakyReLU
from keras.layers.convolutional import Conv1D,MaxPooling1D
from keras.models import Sequential
from keras.optimizers import Adam
from DP_eval_functions import NormMinandMax
# 数据设置情况
from keras import backend as K  
K.set_image_dim_ordering('tf') 
batch_size =128
num_classes = 2
epochs = 30

datapath = 'D:\\Spectrum_sense\\Sectrum Sense paper\\sample\\sample\\sample\\data FSK\\spectrum_data_train.mat'

Spectrum_train_data =  h5py.File(datapath,'r')
Spectrum_train_X = Spectrum_train_data['spectrum_data_trainX'][:]
Spectrum_train_Y = Spectrum_train_data['spectrum_data_trainY'][:]
Spectrum_test_X = Spectrum_train_data['spectrum_data_testX'][:]
Spectrum_test_Y = Spectrum_train_data['spectrum_data_testY'][:]

Spectrum_train_X = np.transpose(Spectrum_train_X)
Spectrum_test_X = np.transpose(Spectrum_test_X)
#Spectrum_train_Y = np.transpose(Spectrum_train_Y)
#Spectrum_test_Y = np.transpose(Spectrum_test_Y)


Spectrum_train_data.close()
for i in range(0,len(Spectrum_train_X)):
   Spectrum_train_X[i] = NormMinandMax(Spectrum_train_X[i],0,1)
for i in range(0,len(Spectrum_test_X)):
   Spectrum_test_X[i] = NormMinandMax(Spectrum_test_X[i],0,1)
##打乱顺序
index_train = [i for i in range(len(Spectrum_train_X))]
index_test = [i for i in range(len(Spectrum_test_X))]

random.shuffle(index_train)
random.shuffle(index_test)

Spectrum_train_X = Spectrum_train_X[index_train]
Spectrum_test_X = Spectrum_test_X[index_test]

Spectrum_train_Y = Spectrum_train_Y[index_train]
Spectrum_test_Y = Spectrum_test_Y[index_test]
##加入卷积层的数据处理方式
Spectrum_train_X = Spectrum_train_X.reshape(-1, 3600,1)
Spectrum_test_X = Spectrum_test_X.reshape(-1, 3600,1)
Spectrum_train_X = Spectrum_train_X.astype('float32')
Spectrum_test_X = Spectrum_test_X.astype('float32')

# convert class vectors to binary class matrices
Spectrum_train_Y = keras.utils.to_categorical(Spectrum_train_Y, num_classes)
Spectrum_test_Y = keras.utils.to_categorical(Spectrum_test_Y, num_classes)

model = Sequential()
model.add(Conv1D(64, 3, input_shape=(3600,1)))
model.add(LeakyReLU(alpha=0.33))
model.add(Conv1D(64, 3))
#model.add(LeakyReLU(alpha=0.33))
model.add(MaxPooling1D(3))
#model.add(Conv1D(256, 3, activation='relu'))
#model.add(Conv1D(256, 3, activation='relu'))
#model.add(MaxPooling1D(3))

model.add(GlobalAveragePooling1D())
#model.add(Dropout(0.3))
model.add(Dense(512))
model.add(LeakyReLU(alpha=0.33))
model.add(Dense(2, activation='softmax'))
adam = Adam(lr=0.001,beta_1=0.9,beta_2=0.999,epsilon=None,decay=0,amsgrad=False)
model.summary()
# define the optimzers
model.compile(loss='categorical_crossentropy',
             # optimizer='rmsprop',
              optimizer = adam,
              metrics=['accuracy'])

model.fit(Spectrum_train_X, Spectrum_train_Y,
          batch_size=batch_size,
         epochs=epochs,
         verbose=1,
         validation_split=0.2
         )

scores = model.evaluate(Spectrum_test_X, Spectrum_test_Y, verbose=0)
print('CNN_1D test score:', scores[0])
print('CNN_1D test accuracy:', scores[1])
model.save('D:\\Spectrum_sense\\Sectrum Sense paper\\sample\\sample\\model\\CNN_LFM3_model.h5')
